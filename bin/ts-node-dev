#!/usr/bin/env node

var dev = require('..');
var minimist = require('minimist');

// function getFirstNonOptionArgIndex(args) {
//   for (var i = 2; i < args.length; i++) {
//     if (args[i][0] != '-') return i;
//   }
//   return args.length;
// }

// function removeValueArgs(args, names) {
//   var i = 0;
//   var removed = [];
//   while (i < args.length) {
//     if (~names.indexOf(args[i])) {
//       removed = removed.concat(args.splice(i, 2));
//     } else {
//       i++;
//     }
//   }
//   return removed;
// }

//var nodeArgs = removeValueArgs(process.argv, ['-r', '--require']);
var nodeArgs = []

// //var scriptIndex = getFirstNonOptionArgIndex(process.argv);
// var script = process.argv[scriptIndex];
// var scriptArgs = process.argv.slice(scriptIndex + 1);
// var devArgs = process.argv.slice(2, scriptIndex);
var devArgs = process.argv.slice(2, 100);
var unknown = []
var opts = minimist(devArgs, {
  stopEarly: true,
  boolean: [
    'all-deps', 'deps', 'dedupe', 'poll', 'respawn', 'notify',
    'fast', 'disableWarnings', 'no-cache',
    'prefer-ts'
  ],
  string: [
    'compiler', 'project', 'ignore',
    'ignoreWarnings', 'cache-directory', 'compilerOptions',
    'compile-timeout'
  ],
  alias: {
    'fast': 'F',
    'disableWarnings': 'D',
    'ignoreWarnings': 'I',
    'compilerOptions': 'O',
    'compiler': 'C',
    'project': 'P'
  },
  default: { deps: true, notify: true },
  unknown: function (arg) {
    unknown.push(arg)
    return true
  }
});

var script = opts._[0]
var scriptArgs = opts._.slice(1)

unknown.forEach(function (arg) {
  if (arg === script) return
  nodeArgs.push(arg)
  var argName = arg.replace(/^-+/, '')
  if (typeof opts[argName] === 'string') {
    nodeArgs.push(opts[argName])
  }
})

console.log('nodeArgs', nodeArgs)
console.log('script', script, 'sriptsArgs', scriptArgs)
if (!script) {
  console.log('Usage: ts-node-dev [options] script [arguments]\n');
  process.exit(1);
}

dev(script, scriptArgs, nodeArgs, opts);
